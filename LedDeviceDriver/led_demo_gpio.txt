#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/gpio.h>
#include <linux/gpio/consumer.h>
#include <linux/platform_device.h>
#include <linux/uaccess.h>

#define DEVICE_NAME "led_demo"
#define CLASS_NAME  "led_class"

// GPIO5_IO4 trên i.MX8MM tương ứng với GPIO số hóa
#define GPIO_LED 132  // (GPIO5 * 32) + 4

static struct cdev gpio_cdev;
static dev_t dev_num;
static struct class *dev_class;
//static struct mutex lock;

// Driver function prototypes
static int gpio_led_open(struct inode *inode, struct file *file);
static int gpio_led_release(struct inode *inode, struct file *file);
static ssize_t gpio_led_read(struct file *file, char __user *buf, size_t len, loff_t *offset);
static ssize_t gpio_led_write(struct file *file, const char __user *buf, size_t len, loff_t *offset);

// File operations structure
static struct file_operations fops = {
    .owner = THIS_MODULE,
    .open = gpio_led_open,
    .read = gpio_led_read,
    .write = gpio_led_write,
    .release = gpio_led_release,
};

static int gpio_led_open(struct inode *inode, struct file *file) {
    pr_info("GPIO LED Device Opened\n");
    return 0;
}

static int gpio_led_release(struct inode *inode, struct file *file) {
    pr_info("GPIO LED Device Closed\n");
    return 0;
}

static ssize_t gpio_led_read(struct file *file, char __user *buf, size_t len, loff_t *offset) {
    char state_buf[5]; // "on\n" hoặc "off\n"
    uint8_t gpio_state;
    int state_len;

    //mutex_lock(&lock);
    gpio_state = gpio_get_value(GPIO_LED);
    //mutex_unlock(&lock);

    if (*offset > 0)  // Tránh đọc nhiều lần
        return 0;

    if (!gpio_state)
        state_len = sprintf(state_buf, "on\n");
    else
        state_len = sprintf(state_buf, "off\n");

    if (copy_to_user(buf, state_buf, state_len))
        return -EFAULT;

    *offset += state_len;
    return state_len;
}

static ssize_t gpio_led_write(struct file *file, const char __user *buf, size_t len, loff_t *offset) {
    char kbuf[5];

    if (len > 4)
        return -EINVAL;

    if (copy_from_user(kbuf, buf, len))
        return -EFAULT;

    kbuf[len] = '\0';
    if (strncmp(kbuf, "on", 2) == 0) {
        gpio_set_value(GPIO_LED, 0);
        pr_info("GPIO LED turned ON\n");
    } 
    else if (strncmp(kbuf, "off", 3) == 0) {
        gpio_set_value(GPIO_LED, 1);
        pr_info("GPIO LED turned OFF\n");
    } 
    else {
        sprintf(buf, "%s\n", "Enter on/off");
    }
    
    //mutex_lock(&lock);
    //gpio_set_value(GPIO_LED, val);
    //mutex_unlock(&lock);
    return len;
}

static int __init gpio_led_init(void) {
    //mutex_init(&lock);
    // Cấp phát major/minor number
    if ((alloc_chrdev_region(&dev_num, 0, 1, DEVICE_NAME)) < 0) {
        pr_err("Cannot allocate major number\n");
        return -1;
    }
    pr_info("Major = %d Minor = %d\n", MAJOR(dev_num), MINOR(dev_num));

    // Khởi tạo cdev
    cdev_init(&gpio_cdev, &fops);
    if ((cdev_add(&gpio_cdev, dev_num, 1)) < 0) {
        pr_err("Cannot add the device to the system\n");
        unregister_chrdev_region(dev_num, 1);
        return -1;
    }

    // Tạo class cho thiết bị
    dev_class = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(dev_class)) {
        pr_err("Cannot create class\n");
        cdev_del(&gpio_cdev);
        unregister_chrdev_region(dev_num, 1);
        return PTR_ERR(dev_class);
    }

    // Tạo thiết bị `/dev/led_demo`
    if (IS_ERR(device_create(dev_class, NULL, dev_num, NULL, DEVICE_NAME))) {
        pr_err("Cannot create device\n");
        class_destroy(dev_class);
        cdev_del(&gpio_cdev);
        unregister_chrdev_region(dev_num, 1);
        return -1;
    }

    // Kiểm tra và yêu cầu GPIO
    if (!gpio_is_valid(GPIO_LED)) {
        pr_err("GPIO %d is not valid\n", GPIO_LED);
        goto r_device;
    }

    if (gpio_request(GPIO_LED, "GPIO5_IO4") < 0) {
        pr_err("Failed to request GPIO %d\n", GPIO_LED);
        goto r_gpio;
    }

    // Cấu hình GPIO làm output và bật LED mặc định
    gpio_direction_output(GPIO_LED, 1);
    pr_info("GPIO LED Driver Loaded Successfully\n");
    return 0;

r_gpio:
    gpio_free(GPIO_LED);
r_device:
    device_destroy(dev_class, dev_num);
    class_destroy(dev_class);
    cdev_del(&gpio_cdev);
    unregister_chrdev_region(dev_num, 1);
    return -1;
}

static void __exit gpio_led_exit(void) {
    gpio_set_value(GPIO_LED, 0);  // Tắt LED trước khi gỡ driver
    gpio_free(GPIO_LED);
    device_destroy(dev_class, dev_num);
    class_destroy(dev_class);
    cdev_del(&gpio_cdev);
    unregister_chrdev_region(dev_num, 1);
    //mutex_destroy(&lock);
    pr_info("GPIO LED Driver Removed\n");
}

module_init(gpio_led_init);
module_exit(gpio_led_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("PhamLam");
MODULE_DESCRIPTION("GPIO LED Driver for i.MX8MM - GPIO5_IO4");
MODULE_VERSION("1.0");
